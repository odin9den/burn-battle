//color vars export
@function color($color) {
	@if map-has-key($colors, $color) {
		@return map-get($colors, $color);
	}
}
@function contains($list, $values...) {
	@each $value in $values {
		@if type-of(index($list, $value)) != "number" {
			@return false;
		}
	}
	@return true;
}

@function font-source-declaration(
	$font-family,
	$file-path,
	$file-formats) {

	$src: ();

	$formats-map: (
		eot:   "#{$file-path}.eot?#iefix" format("embedded-opentype"),
		woff2: "#{$file-path}.woff2" format("woff2"),
		woff:  "#{$file-path}.woff" format("woff"),
		ttf:   "#{$file-path}.ttf" format("truetype"),
		svg:   "#{$file-path}.svg##{$font-family}" format("svg")
	);

	@each $key, $values in $formats-map {
		@if contains($file-formats, $key) {
			$file-path: nth($values, 1);
			$font-format: nth($values, 2);
			$src: append($src, url($file-path) $font-format, comma);
		}
	}
	@return $src;
}

@mixin font-face(
	$font-family,
	$file-path,
	$weight: normal,
	$style: normal,
	$file-formats: eot woff2 woff ttf svg) {
	@font-face {
		font-family: $font-family;
		font-style: $style;
		font-weight: $weight;
		src: font-source-declaration(
			$font-family,
			$file-path,
			$file-formats
		);
	}
}
@each $item in $fonts {
	@if str-index(nth($item,1), 'googleapis') {
		@import url(nth($item,1));
	} @else {
		$font-family: nth($item,1);
		$file-path: '../fonts/' + nth($item,2);
		$weight: removeUnit(nth($item,3));
		$style: if(unit(nth($item,3)) == 'i', italic, normal);
		$file-formats: nth($item,4);
		@include font-face(
			$font-family,
			$file-path,
			$weight,
			$style,
			$file-formats
		);
	}
}

