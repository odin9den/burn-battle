@function removeUnit($value) {
	@return if(unitless($value), $value, $value / ($value * 0 + 1));
}


@function spacing($spacing, $breakpoint: null) {
	$map: ();
	$important: if(unit($spacing) == 'i', !important, '');
	$spacing: removeUnit($spacing);
	$negative: if($spacing < 0, -1, 1);

	@each $breakpoint, $point in map-get($spacings, abs($spacing)) {
		@if ($point != null) {
			$map: map-merge($map, ($breakpoint: $point * $negative #{$important}));
		};
	}

	@if $breakpoint {
		@return map-get($map, $breakpoint);
	} @else {
		@return $map;
	}
}
// Breakpoint viewport sizes and media queries.
//
// Breakpoints are defined as a map of (name: minimum width), order from small to large:
//
//    (xs: 0, sm: 576px, md: 768px, lg: 992px, xl: 1200px)
//
// The map defined in the `$grid-breakpoints` global variable is used as the `$breakpoints` argument by default.

// Name of the next breakpoint, or null for the last breakpoint.
//
//    >> breakpoint-next(sm)
//    md
//    >> breakpoint-next(sm, (xs: 0, sm: 576px, md: 768px, lg: 992px, xl: 1200px))
//    md
//    >> breakpoint-next(sm, $breakpoint-names: (xs sm md lg xl))
//    md
@function breakpoint-next($name, $breakpoints: $grid-breakpoints, $breakpoint-names: map-keys($breakpoints)) {
  $n: index($breakpoint-names, $name);
  @return if($n != null and $n < length($breakpoint-names), nth($breakpoint-names, $n + 1), null);
}

// Minimum breakpoint width. Null for the smallest (first) breakpoint.
//
//    >> breakpoint-min(sm, (xs: 0, sm: 576px, md: 768px, lg: 992px, xl: 1200px))
//    576px
@function breakpoint-min($name, $breakpoints: $grid-breakpoints) {
  $min: map-get($breakpoints, $name);
  @return if($min != 0, $min, null);
}

// Maximum breakpoint width. Null for the largest (last) breakpoint.
// The maximum value is calculated as the minimum of the next one less 0.02px
// to work around the limitations of `min-` and `max-` prefixes and viewports with fractional widths.
// See https://www.w3.org/TR/mediaqueries-4/#mq-min-max
// Uses 0.02px rather than 0.01px to work around a current rounding bug in Safari.
// See https://bugs.webkit.org/show_bug.cgi?id=178261
//
//    >> breakpoint-max(sm, (xs: 0, sm: 576px, md: 768px, lg: 992px, xl: 1200px))
//    767.98px
@function breakpoint-max($name, $breakpoints: $grid-breakpoints) {
  $next: breakpoint-next($name, $breakpoints);
  @return if($next, breakpoint-min($next, $breakpoints) - .02, null);
}

// Returns a blank string if smallest breakpoint, otherwise returns the name with a dash in front.
// Useful for making responsive utilities.
//
//    >> breakpoint-infix(xs, (xs: 0, sm: 576px, md: 768px, lg: 992px, xl: 1200px))
//    ""  (Returns a blank string)
//    >> breakpoint-infix(sm, (xs: 0, sm: 576px, md: 768px, lg: 992px, xl: 1200px))
//    "-sm"
@function breakpoint-infix($name, $breakpoints: $grid-breakpoints) {
  @return if(breakpoint-min($name, $breakpoints) == null, "", "-#{$name}");
}

// Media of at least the minimum breakpoint width. No query for the smallest breakpoint.
// Makes the @content apply to the given breakpoint and wider.
@mixin media-breakpoint-up($name, $breakpoints: $grid-breakpoints) {
  $min: breakpoint-min($name, $breakpoints);
  @if $min {
    @media (min-width: $min) {
      @content;
    }
  } @else {
    @content;
  }
}

// Media of at most the maximum breakpoint width. No query for the largest breakpoint.
// Makes the @content apply to the given breakpoint and narrower.
@mixin media-breakpoint-down($name, $breakpoints: $grid-breakpoints) {
  $max: breakpoint-max($name, $breakpoints);
  @if $max {
    @media (max-width: $max) {
      @content;
    }
  } @else {
    @content;
  }
}

// Media that spans multiple breakpoint widths.
// Makes the @content apply between the min and max breakpoints
@mixin media-breakpoint-between($lower, $upper, $breakpoints: $grid-breakpoints) {
  $min: breakpoint-min($lower, $breakpoints);
  $max: breakpoint-max($upper, $breakpoints);

  @if $min != null and $max != null {
    @media (min-width: $min) and (max-width: $max) {
      @content;
    }
  } @else if $max == null {
    @include media-breakpoint-up($lower, $breakpoints) {
      @content;
    }
  } @else if $min == null {
    @include media-breakpoint-down($upper, $breakpoints) {
      @content;
    }
  }
}

// Media between the breakpoint's minimum and maximum widths.
// No minimum for the smallest breakpoint, and no maximum for the largest one.
// Makes the @content apply only to the given breakpoint, not viewports any wider or narrower.
@mixin media-breakpoint-only($name, $breakpoints: $grid-breakpoints) {
  $min: breakpoint-min($name, $breakpoints);
  $max: breakpoint-max($name, $breakpoints);

  @if $min != null and $max != null {
    @media (min-width: $min) and (max-width: $max) {
      @content;
    }
  } @else if $max == null {
    @include media-breakpoint-up($name, $breakpoints) {
      @content;
    }
  } @else if $min == null {
    @include media-breakpoint-down($name, $breakpoints) {
      @content;
    }
  }
}


// Bootstrap functions
//
// Utility mixins and functions for evaluating source code across our variables, maps, and mixins.

// Ascending
// Used to evaluate Sass maps like our grid breakpoints.
@mixin _assert-ascending($map, $map-name) {
  $prev-key: null;
  $prev-num: null;
  @each $key, $num in $map {
    @if $prev-num == null or unit($num) == "%" or unit($prev-num) == "%" {
      // Do nothing
    } @else if not comparable($prev-num, $num) {
      @warn "Potentially invalid value for #{$map-name}: This map must be in ascending order, but key '#{$key}' has value #{$num} whose unit makes it incomparable to #{$prev-num}, the value of the previous key '#{$prev-key}' !";
    } @else if $prev-num >= $num {
      @warn "Invalid value for #{$map-name}: This map must be in ascending order, but key '#{$key}' has value #{$num} which isn't greater than #{$prev-num}, the value of the previous key '#{$prev-key}' !";
    }
    $prev-key: $key;
    $prev-num: $num;
  }
}

// Starts at zero
// Used to ensure the min-width of the lowest breakpoint starts at 0.
@mixin _assert-starts-at-zero($map, $map-name: "$grid-breakpoints") {
  @if length($map) > 0 {
    $values: map-values($map);
    $first-value: nth($values, 1);
    @if $first-value != 0 {
      @warn "First breakpoint in #{$map-name} must start at 0, but starts at #{$first-value}.";
    }
  }
}

// Replace `$search` with `$replace` in `$string`
// Used on our SVG icon backgrounds for custom forms.
//
// @author Hugo Giraudel
// @param {String} $string - Initial string
// @param {String} $search - Substring to replace
// @param {String} $replace ('') - New value
// @return {String} - Updated string
@function str-replace($string, $search, $replace: "") {
  $index: str-index($string, $search);

  @if $index {
    @return str-slice($string, 1, $index - 1) + $replace + str-replace(str-slice($string, $index + str-length($search)), $search, $replace);
  }

  @return $string;
}

// See https://codepen.io/kevinweber/pen/dXWoRw
//
// Requires the use of quotes around data URIs.

@function escape-svg($string) {
  @if str-index($string, "data:image/svg+xml") {
    @each $char, $encoded in $escaped-characters {
      // Do not escape the url brackets
      @if str-index($string, "url(") == 1 {
        $string: url("#{str-replace(str-slice($string, 6, -3), $char, $encoded)}");
      } @else {
        $string: str-replace($string, $char, $encoded);
      }
    }
  }

  @return $string;
}

// Color contrast
@function color-yiq($color, $dark: $yiq-text-dark, $light: $yiq-text-light) {
  $r: red($color);
  $g: green($color);
  $b: blue($color);

  $yiq: (($r * 299) + ($g * 587) + ($b * 114)) * .001;

  @if ($yiq >= $yiq-contrasted-threshold) {
    @return $dark;
  } @else {
    @return $light;
  }
}

// Retrieve color Sass maps
@function color($key: "blue") {
  @return map-get($colors, $key);
}

@function theme-color($key: "primary") {
  @return map-get($theme-colors, $key);
}

@function gray($key: "100") {
  @return map-get($grays, $key);
}

// Request a theme color level
@function theme-color-level($color-name: "primary", $level: 0) {
  $color: theme-color($color-name);
  $color-base: if($level > 0, $black, $white);
  $level: abs($level);

  @return mix($color-base, $color, $level * $theme-color-interval);
}

// Return valid calc
@function add($value1, $value2, $return-calc: true) {
  @if $value1 == null {
    @return $value2;
  }

  @if $value2 == null {
    @return $value1;
  }

  @if type-of($value1) == number and type-of($value2) == number and comparable($value1, $value2) {
    @return $value1 + $value2;
  }

  @return if($return-calc == true, calc(#{$value1} + #{$value2}), $value1 + unquote(" + ") + $value2);
}

@function subtract($value1, $value2, $return-calc: true) {
  @if $value1 == null and $value2 == null {
    @return null;
  }

  @if $value1 == null {
    @return -$value2;
  }

  @if $value2 == null {
    @return $value1;
  }

  @if type-of($value1) == number and type-of($value2) == number and comparable($value1, $value2) {
    @return $value1 - $value2;
  }

  @if type-of($value2) != number {
    $value2: unquote("(") + $value2 + unquote(")");
  }

  @return if($return-calc == true, calc(#{$value1} - #{$value2}), $value1 + unquote(" - ") + $value2);
}

@function divide($dividend, $divisor, $precision: 10) {
  $sign: if($dividend > 0 and $divisor > 0 or $dividend < 0 and $divisor < 0, 1, -1);
  $dividend: abs($dividend);
  $divisor: abs($divisor);
  @if $dividend == 0 {
    @return 0;
  }
  @if $divisor == 0 {
    @error "Cannot divide by 0";
  }
  $remainder: $dividend;
  $result: 0;
  $factor: 10;
  @while ($remainder > 0 and $precision >= 0) {
    $quotient: 0;
    @while ($remainder >= $divisor) {
      $remainder: $remainder - $divisor;
      $quotient: $quotient + 1;
    }
    $result: $result * 10 + $quotient;
    $factor: $factor * .1;
    $remainder: $remainder * 10;
    $precision: $precision - 1;
    @if ($precision < 0 and $remainder >= $divisor * 5) {
      $result: $result + 1;
    }
  }
  $result: $result * $factor * $sign;
  $dividend-unit: unit($dividend);
  $divisor-unit: unit($divisor);
  $unit-map: (
    "px": 1px,
    "rem": 1rem,
    "em": 1em,
    "%": 1%
  );
  @if ($dividend-unit != $divisor-unit and map-has-key($unit-map, $dividend-unit)) {
    $result: $result * map-get($unit-map, $dividend-unit);
  }
  @return $result;
}




// Container widths
//
// Set the container width, and override it for fixed navbars in media queries.
@mixin make-container($gutter: $grid-gutter-width) {
  width: 100%;
  padding-right: $gutter * .5;
  padding-left: $gutter * .5;
  margin-right: auto;
  margin-left: auto;
}
@mixin make-row($gutter: $grid-gutter-width) {
  display: flex;
  flex-wrap: wrap;
  margin-right: -$gutter * .5;
  margin-left: -$gutter * .5;
}


@if $enable-grid-classes {
  // Single container class with breakpoint max-widths
  .container,
  // 100% wide container at all breakpoints
  .container-fluid {
    @include make-container();
  }

  // Responsive containers that are 100% wide until a breakpoint
  @each $breakpoint, $container-max-width in $container-max-widths {
    .container-#{$breakpoint} {
      @extend .container-fluid;
    }

    @include media-breakpoint-up($breakpoint, $grid-breakpoints) {
      %responsive-container-#{$breakpoint} {
        max-width: $container-max-width;
      }

      // Extend each breakpoint which is smaller or equal to the current breakpoint
      $extend-breakpoint: true;

      @each $name, $width in $grid-breakpoints {
        @if ($extend-breakpoint) {
          .container#{breakpoint-infix($name, $grid-breakpoints)} {
            @extend %responsive-container-#{$breakpoint};
          }

          // Once the current breakpoint is reached, stop extending
          @if ($breakpoint == $name) {
            $extend-breakpoint: false;
          }
        }
      }
    }
  }
}


// Row
//
// Rows contain your columns.

@if $enable-grid-classes {
  .row {
    @include make-row();
  }

  // Remove the negative margin from default .row, then the horizontal padding
  // from all immediate children columns (to prevent runaway style inheritance).
  .no-gutters {
    margin-right: 0;
    margin-left: 0;

    > .col,
    > [class*="col-"] {
      padding-right: 0;
      padding-left: 0;
    }
  }
}

@mixin make-col($size, $columns: $grid-columns) {
  flex: 0 0 percentage(divide($size, $columns));
  // Add a `max-width` to ensure content within each column does not blow out
  // the width of the column. Applies to IE10+ and Firefox. Chrome and Safari
  // do not appear to require this.
  max-width: percentage(divide($size, $columns));
}

@mixin make-col-auto() {
  flex: 0 0 auto;
  width: auto;
  max-width: 100%; // Reset earlier grid tiers
}

@mixin make-col-offset($size, $columns: $grid-columns) {
  $num: divide($size, $columns);
  margin-left: if($num == 0, 0, percentage($num));
}

// Row columns
//
// Specify on a parent element(e.g., .row) to force immediate children into NN
// numberof columns. Supports wrapping to new lines, but does not do a Masonry
// style grid.
@mixin row-cols($count) {
  > * {
    flex: 0 0 divide(100%, $count);
    max-width: divide(100%, $count);
  }
}


// Framework grid generation
//
// Used only by Bootstrap to generate the correct number of grid classes given
// any value of `$grid-columns`.

@mixin make-grid-columns($columns: $grid-columns, $gutter: $grid-gutter-width, $breakpoints: $grid-breakpoints) {
  // Common properties for all breakpoints
  %grid-column {
    position: relative;
    width: 100%;
    padding-right: $gutter * .5;
    padding-left: $gutter * .5;
  }

  @each $breakpoint in map-keys($breakpoints) {
    $infix: breakpoint-infix($breakpoint, $breakpoints);

    @if $columns > 0 {
      // Allow columns to stretch full width below their breakpoints
      @for $i from 1 through $columns {
        .col#{$infix}-#{$i} {
          @extend %grid-column;
        }
      }
    }

    .col#{$infix},
    .col#{$infix}-auto {
      @extend %grid-column;
    }

    @include media-breakpoint-up($breakpoint, $breakpoints) {
      // Provide basic `.col-{bp}` classes for equal-width flexbox columns
      .col#{$infix} {
        flex-basis: 0;
        flex-grow: 1;
        max-width: 100%;
      }

      @if $grid-row-columns > 0 {
        @for $i from 1 through $grid-row-columns {
          .row-cols#{$infix}-#{$i} {
            @include row-cols($i);
          }
        }
      }

      .col#{$infix}-auto {
        @include make-col-auto();
      }

      @if $columns > 0 {
        @for $i from 1 through $columns {
          .col#{$infix}-#{$i} {
            @include make-col($i, $columns);
          }
        }
      }

      .order#{$infix}-first { order: -1; }

      .order#{$infix}-last { order: $columns + 1; }

      @for $i from 0 through $columns {
        .order#{$infix}-#{$i} { order: $i; }
      }

      @if $columns > 0 {
        // `$columns - 1` because offsetting by the width of an entire row isn't possible
        @for $i from 0 through ($columns - 1) {
          @if not ($infix == "" and $i == 0) { // Avoid emitting useless .offset-0
            .offset#{$infix}-#{$i} {
              @include make-col-offset($i, $columns);
            }
          }
        }
      }
    }
  }
}


// Columns
//
// Common styles for small and large grid columns

@if $enable-grid-classes {
  @include make-grid-columns();
}

@mixin setProperty($property, $value) {
	@if type_of($value) == string {
		#{$property}: unquote($value);
	}
	@else {
		#{$property}: $value;
	}
}

@mixin mq($properties, $direction: down) {
	@each $property, $value in $properties {
		@each $breakpoint, $val in $value {
			@if $direction == up {
				@include media-breakpoint-up($breakpoint) {
					@include setProperty($property, $val);
				}
			}
			@else {
				@include media-breakpoint-down($breakpoint) {
					@include setProperty($property, $val);
				}
			}
		}
	}
};

reset-media-query {
	@include mq((rest-up: (xl: up, lg: up, md: up, sm: up)),up);
	@include mq((rest-down: (xl: down, lg: down, md: down, sm: down)));
}

// Responsive spacing
@each $key in map-keys($spacings) {
	@each $prop, $abbrev in (margin: m, padding: p) {
		
		.s-#{$abbrev}-#{$key} {
			@include mq((#{$prop}: spacing($key)),up);
		}
		.s-#{$abbrev}t-#{$key},
		.s-#{$abbrev}y-#{$key} {
			@include mq((#{$prop}-top: spacing($key)),up);
		}
		.s-#{$abbrev}b-#{$key},
		.s-#{$abbrev}y-#{$key} {
			@include mq((#{$prop}-bottom: spacing($key)),up);
		}
		.s-#{$abbrev}r-#{$key},
		.s-#{$abbrev}x-#{$key} {
			@include mq((#{$prop}-right: spacing($key)),up);
		}
		.s-#{$abbrev}l-#{$key},
		.s-#{$abbrev}x-#{$key} {
			@include mq((#{$prop}-left: spacing($key)),up);
		}
		
	}
}

// Single spacing
@each $breakpoint in map-keys($grid-breakpoints) {
	@include media-breakpoint-up($breakpoint) {
		$infix: breakpoint-infix($breakpoint, $grid-breakpoints);
		
		@each $key in map-keys($spacings) {
			@each $prop, $abbrev in (margin: m, padding: p) {
				
				$spacing: $key * 1px;
				
				.s-#{$abbrev}#{$infix}-s#{$key} {
					#{$prop}: $spacing !important;
				}
				.s-#{$abbrev}t#{$infix}-s#{$key},
				.s-#{$abbrev}y#{$infix}-s#{$key} {
					#{$prop}-top: $spacing !important;
				}
				.s-#{$abbrev}b#{$infix}-s#{$key},
				.s-#{$abbrev}y#{$infix}-s#{$key} {
					#{$prop}-bottom: $spacing !important;
				}
				.s-#{$abbrev}r#{$infix}-s#{$key},
				.s-#{$abbrev}x#{$infix}-s#{$key} {
					#{$prop}-right: $spacing !important;
				}
				.s-#{$abbrev}l#{$infix}-s#{$key},
				.s-#{$abbrev}x#{$infix}-s#{$key} {
					#{$prop}-left: $spacing !important;
				}
				
			}
		}
		
	}
}

// Margin auto
@each $breakpoint in map-keys($grid-breakpoints) {
	@include media-breakpoint-up($breakpoint) {
		$infix: breakpoint-infix($breakpoint, $grid-breakpoints);
		
		.s-mt#{$infix}-auto,
		.s-my#{$infix}-auto {
			margin-top: auto !important;
		}
		.s-mb#{$infix}-auto,
		.s-my#{$infix}-auto {
			margin-bottom: auto !important;
		}
		.s-mr#{$infix}-auto,
		.s-mx#{$infix}-auto {
			margin-right: auto !important;
		}
		.s-ml#{$infix}-auto,
		.s-mx#{$infix}-auto {
			margin-left: auto !important;
		}
		
	}
}

// Section spacings
@each $prop, $abbrev in (margin: m, padding: p) {
	.s-#{$abbrev}t,
	.s-#{$abbrev}y {
		@include mq((#{$prop}-top: spacing($section-spacing)),up);
		
	}
	.s-#{$abbrev}b,
	.s-#{$abbrev}y {
		@include mq((#{$prop}-bottom: spacing($section-spacing)),up);
	}
}

// Row gap
@each $breakpoint in map-keys($grid-breakpoints) {
	@include media-breakpoint-up($breakpoint) {
		$infix: breakpoint-infix($breakpoint, $grid-breakpoints);
		
		@each $key in map-keys($spacings) {
			
			$spacing: $key * 1px;

			.s-row-gap#{$infix}-s#{$key} {
				margin-bottom: -$spacing !important;
				>* {
					margin-bottom: $spacing !important;
				}
			}
		}
		
	}
}

@each $key in map-keys($spacings) {
	.s-row-gap-#{$key} {
		@include mq((margin-bottom: spacing(-$key*1i)),up);
		>* {
			@include mq((margin-bottom: spacing($key*1i)),up);
		}
	}
}

// Alignment
@each $breakpoint in map-keys($grid-breakpoints) {
	@include media-breakpoint-up($breakpoint) {
		$infix: breakpoint-infix($breakpoint, $grid-breakpoints);

		.s-txt#{$infix}-left   { text-align: left !important; }
		.s-txt#{$infix}-right  { text-align: right !important; }
		.s-txt#{$infix}-center { text-align: center !important; }
	}
}

// Transformation
.s-txt-lowercase  { text-transform: lowercase !important; }
.s-txt-uppercase  { text-transform: uppercase !important; }
.s-txt-capitalize { text-transform: capitalize !important; }

// Wrap
.s-txt-wrap   { white-space: normal !important; }
.s-txt-nowrap { white-space: nowrap !important; }

// Font-size
@each $key, $settings in $special-text {
	.s-txt-#{$key} {
		@each $key, $prop in $settings {
			@if (type-of($prop) == map ) {
				@include mq((#{$key}: ($prop)));
			} @else {
				#{$key}: $prop;
			}
		}
	}
}

// Font-weight
@each $weight in (100,200,300,400,500,600,700,800,900) {
	.s-txt-#{$weight} {
		font-weight: $weight !important;
	}
}

// Colors
@each $color, $hex in $colors {
	.s-txt-#{$color} {
		color: $hex !important;
	}
}

$displays: none, block, inline-block, flex, inline-flex;

@each $breakpoint in map-keys($grid-breakpoints) {
	@include media-breakpoint-up($breakpoint) {
		$infix: breakpoint-infix($breakpoint, $grid-breakpoints);
		
		@each $value in $displays {
			.s-d#{$infix}-#{$value} { display: $value !important; }
		}
	}
}
@each $breakpoint in map-keys($grid-breakpoints) {
	@include media-breakpoint-up($breakpoint) {
		$infix: breakpoint-infix($breakpoint, $grid-breakpoints);
		
		.s-f#{$infix}-row            { flex-direction: row; }
		.s-f#{$infix}-column         { flex-direction: column; }
		.s-f#{$infix}-row-reverse    { flex-direction: row-reverse; }
		.s-f#{$infix}-column-reverse { flex-direction: column-reverse; }
		
		.s-f#{$infix}-wrap         { flex-wrap: wrap; }
		.s-f#{$infix}-nowrap       { flex-wrap: nowrap; }
		.s-f#{$infix}-wrap-reverse { flex-wrap: wrap-reverse; }
		.s-f#{$infix}-fill         { flex: 1 1 auto; }
		.s-f#{$infix}-grow-0       { flex-grow: 0; }
		.s-f#{$infix}-grow-1       { flex-grow: 1; }
		.s-f#{$infix}-shrink-0     { flex-shrink: 0; }
		.s-f#{$infix}-shrink-1     { flex-shrink: 1; }
		
		.s-jc#{$infix}-start   { justify-content: flex-start; }
		.s-jc#{$infix}-end     { justify-content: flex-end; }
		.s-jc#{$infix}-center  { justify-content: center; }
		.s-jc#{$infix}-between { justify-content: space-between; }
		.s-jc#{$infix}-around  { justify-content: space-around; }
		.s-jc#{$infix}-evenly  { justify-content: space-evenly; }
		
		.s-ai#{$infix}-start    { align-items: flex-start; }
		.s-ai#{$infix}-end      { align-items: flex-end; }
		.s-ai#{$infix}-center   { align-items: center; }
		.s-ai#{$infix}-baseline { align-items: baseline; }
		.s-ai#{$infix}-stretch  { align-items: stretch; }
		
		.s-ac#{$infix}-start   { align-content: flex-start; }
		.s-ac#{$infix}-end     { align-content: flex-end; }
		.s-ac#{$infix}-center  { align-content: center; }
		.s-ac#{$infix}-between { align-content: space-between; }
		.s-ac#{$infix}-around  { align-content: space-around; }
		.s-ac#{$infix}-evenly  { align-content: space-evenly; }
		.s-ac#{$infix}-stretch { align-content: stretch; }
		
		.s-as#{$infix}-auto     { align-self: auto; }
		.s-as#{$infix}-start    { align-self: flex-start; }
		.s-as#{$infix}-end      { align-self: flex-end; }
		.s-as#{$infix}-center   { align-self: center; }
		.s-as#{$infix}-baseline { align-self: baseline; }
		.s-as#{$infix}-stretch  { align-self: stretch; }
	}
}

@each $color, $hex in $colors {
	.s-bg-#{$color} {
		background-color: $hex;
	}
}

// Special backgrounds
.s-bg {
	&-img {
		background-repeat: no-repeat;
		background-position: center;
		background-size: cover;
	}
	&-pattern {
		background-repeat: repeat;
		background-position: center;
	}
	&-top {
		background-repeat: no-repeat;
		background-position: center top;
	}
	&-bottom {
		background-repeat: no-repeat;
		background-position: center bottom;
	}
}

